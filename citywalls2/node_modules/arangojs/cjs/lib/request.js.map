{"version":3,"file":"request.js","sourceRoot":"","sources":["../../../src/lib/request.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Request handling internals.\n *\n * @packageDocumentation\n * @internal\n */\n\nimport { SystemError } from \"../error.js\";\n\n/**\n * @internal\n */\nfunction systemErrorToJSON(this: SystemError) {\n  return {\n    error: true,\n    errno: this.errno,\n    code: this.code,\n    syscall: this.syscall,\n  };\n}\n\n/**\n * @internal\n */\nexport interface ArangojsResponse extends globalThis.Response {\n  request: globalThis.Request;\n  parsedBody?: any;\n  arangojsHostUrl?: string;\n}\n\n/**\n * @internal\n */\nexport interface ArangojsError extends Error {\n  request: globalThis.Request;\n  toJSON: () => Record<string, any>;\n}\n\n/**\n * @internal\n */\nexport type RequestOptions = {\n  method: string;\n  pathname: string;\n  search?: URLSearchParams;\n  headers: Headers;\n  body: any;\n  expectBinary: boolean;\n  timeout?: number;\n};\n\n/**\n * @internal\n */\nexport type RequestConfig = {\n  credentials: \"omit\" | \"include\" | \"same-origin\";\n  keepalive: boolean;\n  beforeRequest?: (req: globalThis.Request) => void;\n  afterResponse?: (err: ArangojsError | null, res?: ArangojsResponse) => void;\n};\n\n/**\n * @internal\n */\nexport type RequestFunction = {\n  (options: RequestOptions): Promise<ArangojsResponse>;\n  close?: () => void;\n};\n\n/**\n * @internal\n */\nexport const isBrowser = false;\n\n/**\n * Create a function for performing requests against a given host.\n *\n * @param baseUrl - Base URL of the host, i.e. protocol, port and domain name.\n * @param config - Options to use for creating the agent.\n * @param agent - Agent to use for performing requests.\n *\n * @internal\n */\nexport function createRequest(\n  baseUrl: URL,\n  config: RequestConfig\n): RequestFunction {\n  let abort: AbortController | undefined;\n  return Object.assign(\n    async function request({\n      method,\n      search: searchParams,\n      pathname: requestPath,\n      headers: requestHeaders,\n      body,\n      timeout,\n    }: RequestOptions) {\n      const headers = new Headers(requestHeaders);\n      const url = new URL(\n        baseUrl.search ? requestPath + baseUrl.search : requestPath,\n        baseUrl\n      );\n      if (searchParams) {\n        for (const [key, value] of searchParams) {\n          url.searchParams.append(key, value);\n        }\n      }\n      if (body instanceof FormData) {\n        const res = new Response(body);\n        const blob = await res.blob();\n        // Workaround for ArangoDB 3.12.0-rc1 and earlier:\n        // Omitting the final CRLF results in \"bad request body\" fatal error\n        body = new Blob([blob, \"\\r\\n\"], { type: blob.type });\n      }\n      if (!headers.has(\"authorization\")) {\n        headers.set(\n          \"authorization\",\n          `Basic ${btoa(\n            `${baseUrl.username || \"root\"}:${baseUrl.password || \"\"}`\n          )}`\n        );\n      }\n      const request = new Request(url, {\n        method,\n        headers,\n        body,\n        credentials: config.credentials,\n        keepalive: config.keepalive,\n      });\n      if (config.beforeRequest) {\n        config.beforeRequest(request);\n      }\n      abort = new AbortController();\n      let t: ReturnType<typeof setTimeout> | undefined;\n      if (timeout) {\n        t = setTimeout(() => {\n          abort?.abort();\n        }, timeout);\n      }\n      try {\n        const res = await fetch(request, { signal: abort.signal });\n        if (t) clearTimeout(t);\n        const response = res as ArangojsResponse;\n        response.request = request;\n        if (config.afterResponse) {\n          config.afterResponse(null, response);\n        }\n        return response;\n      } catch (err) {\n        if (t) clearTimeout(t);\n        const error = err as ArangojsError;\n        error.request = request;\n        error.toJSON = systemErrorToJSON;\n        if (config.afterResponse) {\n          config.afterResponse(error);\n        }\n        throw error;\n      }\n    },\n    {\n      close() {\n        abort?.abort();\n      },\n    }\n  );\n}\n"]}